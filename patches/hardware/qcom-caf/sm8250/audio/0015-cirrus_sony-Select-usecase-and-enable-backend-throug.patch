From cb72b9a566dcde10bba39f8fb5ec0da3cd298620 Mon Sep 17 00:00:00 2001
From: Marijn Suijten <marijns95@gmail.com>
Date: Wed, 10 Feb 2021 11:16:11 +0100
Subject: [PATCH 15/26] cirrus_sony: Select usecase and enable backend through
 extn API

Enable silent audio playback (for calibration) through more verbose but
more specific APIs instead of manually poking around with the paths.

Signed-off-by: Marijn Suijten <marijns95@gmail.com>
---
 hal/audio_extn/cirrus_sony.c | 41 ++++++++++++++++++++++++++++++++----
 1 file changed, 37 insertions(+), 4 deletions(-)

diff --git a/hal/audio_extn/cirrus_sony.c b/hal/audio_extn/cirrus_sony.c
index d862fb18f..914b4aaaa 100644
--- a/hal/audio_extn/cirrus_sony.c
+++ b/hal/audio_extn/cirrus_sony.c
@@ -44,6 +44,7 @@ static fp_enable_disable_snd_device_t fp_disable_snd_device;
 static fp_enable_disable_snd_device_t  fp_enable_snd_device;
 static fp_enable_disable_audio_route_t fp_disable_audio_route;
 static fp_enable_disable_audio_route_t fp_enable_audio_route;
+static fp_platform_check_and_set_codec_backend_cfg_t fp_platform_check_and_set_codec_backend_cfg;
 
 enum cirrus_playback_state {
     INIT = 0,
@@ -380,6 +381,7 @@ void spkr_prot_init(void *adev, spkr_prot_init_config_t spkr_prot_init_config_va
     fp_enable_snd_device = spkr_prot_init_config_val.fp_enable_snd_device;
     fp_disable_audio_route = spkr_prot_init_config_val.fp_disable_audio_route;
     fp_enable_audio_route = spkr_prot_init_config_val.fp_enable_audio_route;
+    fp_platform_check_and_set_codec_backend_cfg = spkr_prot_init_config_val.fp_platform_check_and_set_codec_backend_cfg;
 
     pthread_mutex_init(&handle.fb_prot_mutex, NULL);
 
@@ -592,13 +594,41 @@ static int cirrus_play_silence(int seconds) {
     struct audio_device *adev = handle.adev_handle;
     struct mixer_ctl *ctl_config = NULL;
     struct pcm_config rx_tmp = { 0 };
+    struct audio_usecase *uc_info_rx;
 
     uint8_t *silence = NULL;
     int i, ret = 0, silence_bytes, silence_cnt = 1;
     unsigned int buffer_size = 0, frames_bytes = 0;
-    int pcm_dev_rx_id = fp_platform_get_pcm_device_id(USECASE_AUDIO_PLAYBACK_DEEP_BUFFER, PCM_PLAYBACK);
-
-    audio_route_apply_and_update_path(adev->audio_route, "deep-buffer-playback");
+    int pcm_dev_rx_id;
+
+    if (!list_empty(&adev->usecase_list)) {
+        ALOGD("%s: Usecase present retry speaker protection", __func__);
+        return -EAGAIN;
+    }
+
+    uc_info_rx = (struct audio_usecase *)calloc(1, sizeof(struct audio_usecase));
+    if (!uc_info_rx) {
+        return -ENOMEM;
+    }
+    uc_info_rx->id = USECASE_AUDIO_PLAYBACK_DEEP_BUFFER;
+    uc_info_rx->type = PCM_PLAYBACK;
+    uc_info_rx->in_snd_device = SND_DEVICE_NONE;
+    uc_info_rx->stream.out = adev->primary_output;
+    list_init(&uc_info_rx->device_list);
+    uc_info_rx->out_snd_device = SND_DEVICE_OUT_SPEAKER_PROTECTED;
+    list_add_tail(&adev->usecase_list, &uc_info_rx->list);
+    fp_platform_check_and_set_codec_backend_cfg(adev, uc_info_rx,
+                                             uc_info_rx->out_snd_device);
+    fp_enable_snd_device(adev, uc_info_rx->out_snd_device);
+    fp_enable_audio_route(adev, uc_info_rx);
+
+    pcm_dev_rx_id = fp_platform_get_pcm_device_id(uc_info_rx->id, PCM_PLAYBACK);
+    ALOGV("%s: pcm device id %d", __func__, pcm_dev_rx_id);
+    if (pcm_dev_rx_id < 0) {
+        ALOGE("%s: Invalid pcm device for usecase (%d)",
+              __func__, uc_info_rx->id);
+        goto exit;
+    }
 
     handle.pcm_rx = pcm_open(adev->snd_card, pcm_dev_rx_id,
                              PCM_OUT, &pcm_config_cirrus_rx);
@@ -648,7 +678,10 @@ static int cirrus_play_silence(int seconds) {
     free(silence);
 
 exit:
-    audio_route_reset_and_update_path(adev->audio_route, "deep-buffer-playback");
+    fp_disable_audio_route(adev, uc_info_rx);
+    fp_disable_snd_device(adev, uc_info_rx->out_snd_device);
+    list_remove(&uc_info_rx->list);
+    free(uc_info_rx);
 
     pcm_close(handle.pcm_rx);
     return ret;
-- 
2.37.1

